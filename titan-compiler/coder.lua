local ast = require "titan-compiler.ast"
local global_upvalues = require "titan-compiler.global_upvalues"
local util = require "titan-compiler.util"
local pretty = require "titan-compiler.pretty"
local typedecl = require "titan-compiler.typedecl"
local types = require "titan-compiler.types"

local coder = {}

local generate_program
local generate_stat
local generate_var
local generate_exp

function coder.generate(filename, input, modname)
    local prog, errors = global_upvalues.analyze(filename, input)
    if not prog then return false, errors end
    local code = generate_program(prog, modname)
    return code, errors
end


-- While generating code we set some extra fields in the AST.
-- In theory we could have stored this info another way, since these fields
-- don't need to be passed to a following pass.
--
-- _cvar:
--     In Decl nodes.
--
-- _global_index:
--     In Toplevel value nodes (Var and Func).
--     Describes where in the variable is stored in the upvalue table.
--
-- _lua_entry_point
-- _titan_entry_point
--     In Toplevel.Func nodes.
--     Names of the C functions that we generate for each titan function

local whole_file_template = [[
/* This file was generated by the Titan compiler. Do not edit by hand */
/* Indentation and formatting courtesy of titan-compiler/pretty.lua */

#include "tcore.h"

#include "lua.h"
#include "lauxlib.h"
#include "lualib.h"

#include "lapi.h"
#include "lfunc.h"
#include "lgc.h"
#include "lobject.h"
#include "lstate.h"
#include "ltable.h"
#include "lvm.h"

#include "math.h"

${DEFINE_FUNCTIONS}

${LUAOPEN_FUNCTION}
]]

--
-- C syntax
--

-- Technically, we only need to escape the quote and backslash
-- But quoting some extra things helps readability...
local some_c_escape_sequences = {
    ["\\"] = "\\\\",
    ["\""] = "\\\"",
    ["\a"] = "\\a",
    ["\b"] = "\\b",
    ["\f"] = "\\f",
    ["\n"] = "\\n",
    ["\r"] = "\\r",
    ["\t"] = "\\t",
    ["\v"] = "\\v",
}

local function c_string(s)
    return '"' .. (s:gsub('.', some_c_escape_sequences)) .. '"'
end

local function c_integer(n)
    return string.format("%i", n)
end

local function c_boolean(b)
    if b then
        return c_integer(1)
    else
        return c_integer(0)
    end
end

local function c_float(n)
    -- Use hexadecimal float literals (%a) to avoid losing any precision.
    -- This feature is part of the C99 and C++17 standards. An alternative
    -- C89-compatiple solution might be to refactor the Titan compiler to
    -- represent float literals as strings instead of as numbers.
    return string.format("%a /*%f*/", n, n)
end

-- @param type Type of the titan value
-- @returns type of the corresponding C variable
--
-- We currently represent C types as strings. This suffices for primitive types
-- and pointers to primitive types but we might need to switch to a full ADT if
-- we decide to also support array and function pointer types.
local function ctype(typ)
    local tag = typ._tag
    if     tag == types.T.Nil      then return "int"
    elseif tag == types.T.Boolean  then return "int"
    elseif tag == types.T.Integer  then return "lua_Integer"
    elseif tag == types.T.Float    then return "lua_Number"
    elseif tag == types.T.String   then return "TString *"
    elseif tag == types.T.Function then return "TValue"
    elseif tag == types.T.Array    then return "Table *"
    elseif tag == types.T.Record   then error("not implemented yet")
    else error("impossible")
    end
end

--
--
--

local function new_cvar(name, ctyp, comment)
    return { name = name, ctyp = ctyp, comment = comment }
end

local function new_tvar(cvar, typ)
    return { cvar = cvar, typ = typ }
end

-- @returns A syntactically valid variable declaration
local function c_declaration(cvar)
    local comment
    if cvar.comment then
        comment = string.format(" /* %s */", cvar.comment)
    else
        comment = ""
    end
    return string.format("%s %s%s", cvar.ctyp, cvar.name, comment)
end

-- Indicates which GC variables should be saved in the Lua stack and which slot
-- they need to be saved in.
local Context = {}
Context.__index = Context

function Context.new()
    local o = {
        tmp_index = 1,       -- next free tmp variable name

        n_stack_slots = 0,   -- current number of used stack slots
        max_stack_slots = 0, -- maximum number of needed stack slots

        live_vars = {},      -- (superset of) current live gc variables
        scopes = {},         -- first index of each scope

        n_saved_vars = 0,    -- how many vars are currently saved in stack
        saveds = {},         -- first index of each group of saved variables

        upvalues = false,    -- global upvalues table and array
    }
    return setmetatable(o, Context)
end

function Context:reserve_slots(n)
    assert(n >= 0)
    self.n_stack_slots = self.n_stack_slots + n
    self.max_stack_slots = math.max(self.max_stack_slots, self.n_stack_slots)
end

function Context:free_slots(n)
    assert(n >= 0)
    self.n_stack_slots = self.n_stack_slots - n
    assert(self.n_stack_slots >= self.n_saved_vars)
end

function Context:begin_scope()
    table.insert(self.scopes, #self.live_vars + 1)
end

function Context:end_scope()
    assert(#self.scopes > 0)
    local scope_start = self.scopes[#self.scopes]
    assert(scope_start > self.n_saved_vars)
    for _ = #self.live_vars, scope_start, -1 do
        table.remove(self.live_vars)
    end
    table.remove(self.scopes)
end

function Context:begin_save()
    local first = self.n_saved_vars + 1
    local last  = #self.live_vars
    local n = last - first + 1
    self:reserve_slots(n)
    self.n_saved_vars = last
    table.insert(self.saveds, first)
    return first, last, n
end

function Context:end_save()
    assert(#self.saveds > 0)
    local first = self.saveds[#self.saveds]
    local last  = self.n_saved_vars
    local n = last - first + 1
    table.remove(self.saveds)
    self.n_saved_vars = first - 1
    self:free_slots(n)
    return first, last, n
end

function Context:new_name()
    local index = self.tmp_index
    self.tmp_index = self.tmp_index + 1
    return string.format("x%d", index)
end

function Context:new_cvar(ctyp, comment)
    local name = self:new_name()
    return new_cvar(name, ctyp, comment)
end

function Context:new_tvar(typ, comment)
    local cvar = self:new_cvar(ctype(typ), comment)
    if types.is_gc(typ) then
        table.insert(self.live_vars, new_tvar(cvar, typ))
    end
    return cvar
end

--
--
--

typedecl.declare(coder, "coder", "Lvalue", {
    CVar      = {"varname"},
    SafeSlot  = {"slot_address", "parent_pointer"},
    ArraySlot = {"slot_address", "parent_pointer"},
})

typedecl.declare(coder, "coder", "RW", {
    Read      = {},
    Write     = {},
})
local READ = coder.RW.Read()
local WRITE = coder.RW.Write()



--
--
--

local function function_name(funcname, kind)
    return string.format("function_%s_%s", funcname, kind)
end

local function get_slot(typ, src_slot_address)
    local tmpl
    local tag = typ._tag
    if     tag == types.T.Nil      then tmpl = "0"
    elseif tag == types.T.Boolean  then tmpl = "bvalue(${SRC})"
    elseif tag == types.T.Integer  then tmpl = "ivalue(${SRC})"
    elseif tag == types.T.Float    then tmpl = "fltvalue(${SRC})"
    elseif tag == types.T.String   then tmpl = "tsvalue(${SRC})"
    elseif tag == types.T.Function then tmpl = "*${SRC}"
    elseif tag == types.T.Array    then tmpl = "hvalue(${SRC})"
    elseif tag == types.T.Record   then error("not implemented")
    else error("impossible")
    end
    return util.render(tmpl, {SRC = src_slot_address})
end


-- Don't call this function directly, call set_stack_slot or set_heap_slot
-- instead
local function set_slot_(typ, dst_slot_address, value)
    local tmpl
    local tag = typ._tag
    if     tag == types.T.Nil      then tmpl = "(void) ${SRC}; setnilvalue(${DST});"
    elseif tag == types.T.Boolean  then tmpl = "setbvalue(${DST}, ${SRC});"
    elseif tag == types.T.Integer  then tmpl = "setivalue(${DST}, ${SRC});"
    elseif tag == types.T.Float    then tmpl = "setfltvalue(${DST}, ${SRC});"
    elseif tag == types.T.String   then tmpl = "setsvalue(L, ${DST}, ${SRC});"
    elseif tag == types.T.Function then tmpl = "setobj(L, ${DST}, &${SRC});"
    elseif tag == types.T.Array    then tmpl = "sethvalue(L, ${DST}, ${SRC});"
    elseif tag == types.T.Record   then error("not implemented yet")
    else error("impossible")
    end
    return util.render(tmpl, { DST = dst_slot_address, SRC = value })
end

local function check_tag(typ, slot)
    local tmpl
    local tag = typ._tag
    if     tag == types.T.Nil      then tmpl = "ttisnil(${SLOT})"
    elseif tag == types.T.Boolean  then tmpl = "ttisboolean(${SLOT})"
    elseif tag == types.T.Integer  then tmpl = "ttisinteger(${SLOT})"
    elseif tag == types.T.Float    then tmpl = "ttisfloat(${SLOT})"
    elseif tag == types.T.String   then tmpl = "ttisstring(${SLOT})"
    elseif tag == types.T.Function then tmpl = "ttisfunction(${SLOT})"
    elseif tag == types.T.Array    then tmpl = "ttistable(${SLOT})"
    elseif tag == types.T.Record   then error("not implemented")
    else error("impossible")
    end
    return util.render(tmpl, {SLOT = slot})
end

local function titan_type_tag(typ)
    local tag = typ._tag
    if     tag == types.T.Nil      then return "LUA_TNIL"
    elseif tag == types.T.Boolean  then return "LUA_TBOOLEAN"
    elseif tag == types.T.Integer  then return "LUA_TNUMINT"
    elseif tag == types.T.Float    then return "LUA_TNUMFLT"
    elseif tag == types.T.String   then return "LUA_TSTRING"
    elseif tag == types.T.Function then return "LUA_TFUNCTION"
    elseif tag == types.T.Array    then return "LUA_TTABLE"
    elseif tag == types.T.Record   then error("not implemented")
    else error("impossible")
    end
end

-- Specialized version of luaH_barrierback. To be called when setting v as an
-- element of p. This is intended to preserve the invariant that black objects
-- cannot point to white objects.
--
-- Instead of checking iscollectable(v) at runtime, we determine this at compile
-- time. And instead of v being a TValue*, it is an internal pointer (as
-- described by ctype()), just like p.
--
-- @param typ: Type of child object
-- @param p: Internal pointer to parent object
-- @param v: Internal pointer to child object
-- @returns C statements
local function barrierback(typ, p, v)
    if not types.is_gc(typ) then
        return ""
    elseif typ._tag == types.T.Function then
        return util.render([[
            if (iscollectable(&${V}) && isblack(obj2gco(${P})) && iswhite(gcvalue(&${V}))) {
                luaC_barrierback_(L, obj2gco(${P}));
            }
        ]], {
            P = p,
            V = v,
        })
    else
        return util.render([[
            if (isblack(obj2gco(${P})) && iswhite(obj2gco(${V}))) {
                luaC_barrierback_(L, obj2gco(${P}));
            }
        ]], {
            P = p,
            V = v,
        })
    end
end

local function set_stack_slot(typ, dst, src)
    return set_slot_(typ, dst, src)
end

local function set_heap_slot(typ, dst, src, parent)
    return util.render([[
        ${SET_SLOT}
        ${BARRIER}
    ]], {
        SET_SLOT = set_slot_(typ, dst, src),
        BARRIER = barrierback(typ, parent, src),
    })
end

local function push_to_stack(ctx, typ, src)
    ctx:reserve_slots(1)
    return util.render([[
        ${SET_SLOT}
        api_incr_top(L);
    ]],{
        SET_SLOT = set_stack_slot(typ, "s2v(L->top)", src),
    })
end

--
-- GC
--

-- Reserves stack space. This should go at the start of the generated function
-- but this should be the last piece of code to be generated, so it can know how
-- big the stack needs to be.
local function gc_reserve_stack(ctx)
    local n = ctx.max_stack_slots
    return util.render([[
        lua_checkstack(L, ${N});
    ]], {
        N = c_integer(n),
    })
end

-- Push potentially live variables to the Lua stack, so the Lua GC can see they
-- are not garbage.
local function gc_save_vars(ctx)
    local first, last, n = ctx:begin_save()

    -- Avoid warnings
    if n == 0 then
        return ""
    end

    local parts = {}

    local top = ctx:new_cvar("StackValue*")
    table.insert(parts, util.render([[
        ${TOP_DECL} = L->top;
    ]], {
        TOP_DECL = c_declaration(top)
    }))

    for i = first, last do
        local tvar = ctx.live_vars[i]
        local slot = util.render("s2v($TOP)", { TOP = top.name })
        table.insert(parts, util.render([[
            ${SET_SLOT} ${TOP}++;
        ]], {
            SET_SLOT = set_stack_slot(tvar.typ, slot, tvar.cvar.name),
            TOP = top.name,
        }))
    end

    table.insert(parts, util.render([[
        L->top = ${TOP};
    ]], {
        TOP = top.name
    }))

    return table.concat(parts, "\n")
end

-- Release variables saved by gc_save_vars
local function gc_release_vars(ctx)
    local _, _, n = ctx:end_save()

     -- Avoid warnings
    if n == 0 then
        return ""
    end

    return util.render([[
        L->top -= ${NSLOTS};
    ]], {
        NSLOTS = c_integer(n)
    })
end

-- Insert a call to luaC_condgc in the program. This invokes the garbage
-- collector and calls the stack-saving code only if needed.
local function gc_cond_gc(ctx)
    local save_vars = gc_save_vars(ctx)
    local release_vars = gc_release_vars(ctx)
    return util.render([[
        luaC_condGC(L, ({
            ${SAVE_VARS}
        }), ({
            ${RELEASE_VARS}
        }));
    ]],{
        SAVE_VARS = save_vars,
        RELEASE_VARS = release_vars,
    })
end

--
--
--

local function generate_titan_entry_point(tl_node)
    local ctx = Context.new()

    local ret_ctype
    if #tl_node._type.rettypes == 0 then
        ret_ctype = "void"
    else
        ret_ctype = ctype(tl_node._type.rettypes[1])
    end

    local params = {}
    table.insert(params, [[lua_State * L]])
    for _, param in ipairs(tl_node.params) do
        param._cvar = ctx:new_tvar(param._type, param.name)
        table.insert(params, c_declaration(param._cvar))
    end

    local body = {}
    if #tl_node._referenced_globals > 0 then
        local closure = ctx:new_cvar("CClosure *")
        ctx.upvalues = {
            table = ctx:new_cvar("Table *", "upvalue table"),
            array = ctx:new_cvar("TValue *", "upvalue array"),
        }
        table.insert(body, util.render([[
            ${CLOSURE_DECL} = clCvalue(s2v(L->ci->func));
            ${T_DECL} = hvalue(&${CLOSURE}->upvalue[0]);
            ${ARR_DECL} = ${T}->array;
        ]], {
            CLOSURE = closure.name,
            CLOSURE_DECL = c_declaration(closure),
            T = ctx.upvalues.table.name,
            T_DECL = c_declaration(ctx.upvalues.table),
            ARR = ctx.upvalues.array.name,
            ARR_DECL = c_declaration(ctx.upvalues.array),
        }))
    end
    table.insert(body, generate_stat(tl_node.block, ctx))

    local reserve_stack = gc_reserve_stack(ctx)

    return util.render([[
        static ${RET} ${NAME}(
            ${PARAMS}
        ){
            ${RESERVE_STACK}
            ${BODY}
        }
    ]], {
        RET = ret_ctype,
        NAME = tl_node._titan_entry_point,
        RESERVE_STACK = reserve_stack,
        PARAMS = table.concat(params, ",\n"),
        BODY = table.concat(body, "\n"),
    })
end

local function generate_lua_entry_point(tl_node)
    local ctx = Context.new()

    local base = ctx:new_cvar("StackValue*")
    local set_base = util.render("${BASE_DECL} = L->ci->func;", {
        BASE_DECL = c_declaration(base)
    })

    local nargs = ctx:new_cvar("int", "nargs")
    local check_nargs = util.render([[
        ${NARGS_DECL} = cast_int(L->top - (${BASE} + 1));
        if (TITAN_UNLIKELY(${NARGS} != ${EXPECTED})) {
            titan_runtime_arity_error(L, ${EXPECTED}, ${NARGS});
        }
    ]], {
        BASE = base.name,
        NARGS = nargs.name,
        NARGS_DECL = c_declaration(nargs),
        EXPECTED = c_integer(#tl_node.params),
    })

    local function argslot(i)
        return util.render("s2v(${BASE} + ${I})", {
            BASE = base.name,
            I = c_integer(i),
        })
    end

    -- TODO: fix: the error message is not able specify if the
    -- given type is float or integer (it prints "number")
    local check_types = {}
    for i, param in ipairs(tl_node.params) do
        local slot = ctx:new_cvar("TValue*")
        table.insert(check_types, util.render([[
            ${SLOT_DECL} = ${SLOT_ADDRESS};
            if (TITAN_UNLIKELY(!${CHECK_TAG})) {
                titan_runtime_argument_type_error(L, ${PARAM_NAME}, ${LINE}, ${EXPECTED_TAG}, ${SLOT_NAME});
            }
        ]], {
            SLOT_NAME = slot.name,
            SLOT_DECL = c_declaration(slot),
            SLOT_ADDRESS = argslot(i),
            CHECK_TAG = check_tag(param._type, slot.name),
            PARAM_NAME = c_string(param.name),
            LINE = c_integer(param.loc.line),
            EXPECTED_TAG = titan_type_tag(param._type),
        }))
    end

    local arg_vars  = {}
    local get_args = {}
    for i, param in ipairs(tl_node.params) do
        local arg = ctx:new_tvar(param._type)
        table.insert(arg_vars, arg)
        table.insert(get_args, util.render([[
            ${ARG_DECL} = ${SLOT_VALUE};
        ]], {
            ARG_DECL = c_declaration(arg),
            SLOT_VALUE = get_slot(param._type, argslot(i)),
        }))
    end

    local titan_args = {"L"}
    for _, var in ipairs(arg_vars) do
        table.insert(titan_args, var.name)
    end
    local titan_call = util.render("${TITAN_ENTRY_POINT}(${ARGS})", {
        TITAN_ENTRY_POINT = tl_node._titan_entry_point,
        ARGS = table.concat(titan_args, ", "),
    })

    local set_return
    if #tl_node._type.rettypes == 0 then
        set_return = util.render([[
            ${TITAN_CALL};
        ]], {
            TITAN_CALL = titan_call,
        })
    elseif #tl_node._type.rettypes == 1 then
        local ret_typ = tl_node._type.rettypes[1]
        local ret = ctx:new_cvar(ctype(ret_typ), "ret")
        local push_ret = push_to_stack(ctx, ret_typ, ret.name)
        set_return = util.render([[
            ${RET_DECL} = ${TITAN_CALL};
            ${PUSH_RET}
        ]], {
            TITAN_CALL = titan_call,
            RET_DECL = c_declaration(ret),
            PUSH_RET = push_ret,
        })
    else
        error("not implemented")
    end

    -- Todo: This is a regular Lua function call so we only need to call
    -- checkstack if we need >= 20 slots.
    local reserve_stack = gc_reserve_stack(ctx)

    return util.render([[
        static int ${LUA_ENTRY_POINT}(lua_State *L)
        {
            ${RESERVE_STACK}
            ${SET_BASE}
            ${CHECK_NARGS}
            ${CHECK_TYPES}
            ${GET_ARGS}
            ${SET_RETURN}
            return ${NRET};
        }
    ]], {
        LUA_ENTRY_POINT = tl_node._lua_entry_point,
        RESERVE_STACK = reserve_stack,
        SET_BASE = set_base,
        CHECK_NARGS = check_nargs,
        CHECK_TYPES = table.concat(check_types, "\n"),
        GET_ARGS = table.concat(get_args, "\n"),
        SET_RETURN = set_return,
        NRET = c_integer(#tl_node._type.rettypes),
    })
end

local function generate_luaopen_modvar_upvalues(prog, ctx)
    local parts = {}

    for _, tl_node in ipairs(prog) do
        if tl_node._global_index then
            local arr_slot = util.render([[ &${ARR}[${I}] ]], {
                ARR = ctx.upvalues.array.name,
                I = c_integer(tl_node._global_index),
            })

            table.insert(parts,
                string.format("/* %s */", ast.toplevel_name(tl_node)))

            local tag = tl_node._tag
            if     tag == ast.Toplevel.Func then
                ctx:begin_scope()
                local closure = ctx:new_cvar("CClosure*")
                local func    = ctx:new_cvar("TValue")
                table.insert(parts,
                    util.render([[
                        ${CLOSURE_DECL} = luaF_newCclosure(L, 1);
                        ${CLOSURE}->f = ${LUA_ENTRY_POINT};
                        sethvalue(L, &${CLOSURE}->upvalue[0], ${UPVALUES});
                        ${FUNC_DECL}; setclCvalue(L, &${FUNC}, ${CLOSURE});
                        ${SET_SLOT}
                    ]],{
                        LUA_ENTRY_POINT = tl_node._lua_entry_point,
                        UPVALUES = ctx.upvalues.table.name,
                        CLOSURE = closure.name,
                        CLOSURE_DECL = c_declaration(closure),
                        FUNC = func.name,
                        FUNC_DECL = c_declaration(func),
                        SET_SLOT = set_heap_slot(
                            tl_node._type, arr_slot, func.name,
                            ctx.upvalues.table.name),
                    })
                )
                ctx:end_scope()

            elseif tag == ast.Toplevel.Var then
                ctx:begin_scope()
                local exp = tl_node.value
                local cstats, cvalue = generate_exp(exp, ctx)
                table.insert(parts, cstats)
                table.insert(parts, set_heap_slot(
                    exp._type, arr_slot, cvalue, ctx.upvalues.table.name))
                ctx:end_scope()

            else
                error("impossible")
            end
        end
    end

    -- Avoid warnings
    if #parts == 0 then
        table.insert(parts, util.render([[
            (void) ${ARR};
        ]], {
            ARR = ctx.upvalues.array.name
        }))
    end

    return table.concat(parts, "\n")
end

local function generate_luaopen_exports_table(prog, ctx)
    local n_exported_functions = 0
    for _, tl_node in ipairs(prog) do
        if tl_node._tag == ast.Toplevel.Func and not tl_node.islocal then
            n_exported_functions = n_exported_functions + 1
        end
    end

    local parts = {}

    table.insert(parts, gc_save_vars(ctx)) -- createtable may call gc

    ctx:reserve_slots(3)
    table.insert(parts, util.render([[
        lua_createtable(L, 0, ${N});
    ]], {
        N = c_integer(n_exported_functions),
    }))
    for _, tl_node in ipairs(prog) do
        if tl_node._tag == ast.Toplevel.Func and not tl_node.islocal then
            table.insert(parts,
                util.render([[
                    lua_pushstring(L, ${NAME});
                    setobj(L, s2v(L->top), &${ARR}[${I}]); api_incr_top(L);
                    lua_settable(L, -3);
                ]], {
                    NAME = c_string(ast.toplevel_name(tl_node)),
                    ARR = ctx.upvalues.array.name,
                    I = c_integer(tl_node._global_index)
                })
            )
        end
    end
    ctx:free_slots(3)

    -- Don't free the vars because the table we want to return is still on top
    -- and we are already returning anyway...
    --table.insert(parts, gc_release_vars(ctx))

    return table.concat(parts, "\n")
end

local function generate_luaopen(prog, modname)
    local ctx = Context.new()
    -- TODO: this is actually an array of Value
    local table_typ = types.T.Array(types.T.Integer())
    ctx.upvalues = {
        table = ctx:new_tvar(table_typ), -- tvar: Don't GC this!
        array = ctx:new_cvar("TValue *"),
    }

    local allocate_upvalues = util.render([[
        ${TBL_DECL} = luaH_new(L);
        luaH_resizearray(L, ${TBL}, ${N});
        ${ARR_DECL} = ${TBL}->array;
    ]], {
        N = c_integer(prog._n_globals),
        TBL = ctx.upvalues.table.name,
        TBL_DECL = c_declaration(ctx.upvalues.table),
        ARR = ctx.upvalues.array.name,
        ARR_DECL = c_declaration(ctx.upvalues.array),
    })

    local init_upvalues =
        generate_luaopen_modvar_upvalues(prog, ctx)

    local init_exports =
        generate_luaopen_exports_table(prog, ctx)

    -- todo: make this reserve_stack optional
    -- (see similar comment in lua entry point)
    local reserve_stack = gc_reserve_stack(ctx)

    return util.render([[
        int luaopen_${MODNAME}(lua_State *L)
        {
            ${RESERVE_STACK}
            /* Allocate upvalue table */
            /* ---------------------- */
            ${ALLOCATE_UPVALUES}
            /* Initialize module var upvalues */
            /* ------------------------------ */
            ${INIT_UPVALUES}
            /* Create exports table     */
            /* ------------------------ */
            ${INIT_EXPORTS}
            return 1;
        }
    ]], {
        MODNAME = modname,
        RESERVE_STACK = reserve_stack,
        ALLOCATE_UPVALUES = allocate_upvalues,
        INIT_UPVALUES = init_upvalues,
        INIT_EXPORTS = init_exports,
    })
end

-- @param prog: (ast) Annotated AST for the whole module
-- @param modname: (string) Lua module name (for luaopen)
-- @return (string) C code for the whole module
generate_program = function(prog, modname)

    -- Name all the function entry points
    for _, tl_node in ipairs(prog) do
        if tl_node._tag == ast.Toplevel.Func then
            tl_node._titan_entry_point =
                function_name(tl_node.name, "titan")
            tl_node._lua_entry_point =
                function_name(tl_node.name, "lua")
        end
    end

    -- Create toplevel function declarations
    local define_functions
    do
        local function_definitions = {}
        for _, tl_node in ipairs(prog) do
            if tl_node._tag == ast.Toplevel.Func then
                assert(#tl_node._type.rettypes <= 1)
                table.insert(function_definitions,
                    generate_titan_entry_point(tl_node))
                table.insert(function_definitions,
                    generate_lua_entry_point(tl_node))
            end
        end
        define_functions = table.concat(function_definitions, "\n")
    end

    local luaopen_function =
        generate_luaopen(prog, modname)

    local code = util.render(whole_file_template, {
        DEFINE_FUNCTIONS = define_functions,
        LUAOPEN_FUNCTION = luaopen_function,
    })
    return pretty.reindent_c(code)
end

-- @param stat: (ast.Stat)
-- @return (string) C statements
generate_stat = function(stat, ctx)
    local tag = stat._tag
    if     tag == ast.Stat.Block then
        ctx:begin_scope()
        local cstatss = {}
        table.insert(cstatss, "{")
        for _, inner_stat in ipairs(stat.stats) do
            table.insert(cstatss, generate_stat(inner_stat, ctx))
        end
        table.insert(cstatss, "}")
        ctx:end_scope()
        return table.concat(cstatss, "\n")

    elseif tag == ast.Stat.While then
        ctx:begin_scope()
        local cond_cstats, cond_cvalue = generate_exp(stat.condition, ctx)
        local block_cstats = generate_stat(stat.block, ctx)
        ctx:end_scope()
        return util.render([[
            for(;;) {
                ${COND_STATS}
                if (!(${COND})) break;
                ${BLOCK}
            }
        ]], {
            COND_STATS = cond_cstats,
            COND = cond_cvalue,
            BLOCK = block_cstats
        })

    elseif tag == ast.Stat.Repeat then
        ctx:begin_scope()
        local block_cstats = generate_stat(stat.block, ctx)
        local cond_cstats, cond_cvalue = generate_exp(stat.condition, ctx)
        ctx:end_scope()
        return util.render([[
            for(;;){
                ${BLOCK}
                ${COND_STATS}
                if (${COND}) break;
            }
        ]], {
            COND_STATS = cond_cstats,
            COND = cond_cvalue,
            BLOCK = block_cstats,
        })

    elseif tag == ast.Stat.If then
        ctx:begin_scope()

        local cstats
        if stat.elsestat then
            cstats = generate_stat(stat.elsestat, ctx)
        else
            cstats = nil
        end

        for i = #stat.thens, 1, -1 do
            local then_ = stat.thens[i]
            local cond_cstats, cond_cvalue = generate_exp(then_.condition, ctx)
            local block_cstats = generate_stat(then_.block, ctx)
            local else_ = (cstats and "else " .. cstats or "")

            cstats = util.render(
                [[{
                    ${STATS}
                    if (${COND}) ${BLOCK} ${ELSE}
                }]], {
                STATS = cond_cstats,
                COND = cond_cvalue,
                BLOCK = block_cstats,
                ELSE = else_
            })
        end

        ctx:end_scope()

        return cstats

    elseif tag == ast.Stat.For then
        ctx:begin_scope()
        local typ = stat.decl._type

        local start_cstats, start_cvalue = generate_exp(stat.start, ctx)
        local start = ctx:new_tvar(typ, "start")

        local finish_cstats, finish_cvalue = generate_exp(stat.finish, ctx)
        local finish = ctx:new_tvar(typ, "finish")

        local inc_cstats, inc_cvalue = generate_exp(stat.inc, ctx)
        local inc = ctx:new_tvar(typ, "inc")

        stat.decl._cvar = ctx:new_tvar(typ, stat.decl.name)

        local block_cstats = generate_stat(stat.block, ctx)

        local render_names = {
            INC = inc.name,
            START = start.name,
            FINISH = finish.name,
        }

        -- TODO: remove ternary operator when step is a constant
        local loop_cond = util.render(
            [[(${INC} >= 0 ? ${START} <= ${FINISH} : ${START} >= ${FINISH})]],
            render_names)

        local loop_step
        if typ._tag == types.T.Integer then
            loop_step = util.render([[${START} = intop(+, ${START}, ${INC});]],
                render_names)
        elseif typ._tag == types.T.Float then
            loop_step = util.render([[${START} = ${START} + ${INC};]],
                render_names)
        else
            error("impossible")
        end

        ctx:end_scope()
        return util.render([[
            ${START_STAT}
            ${FINISH_STAT}
            ${INC_STAT}
            ${START_DECL} = ${START_VALUE};
            ${FINISH_DECL} = ${FINISH_VALUE};
            ${INC_DECL} = ${INC_VALUE};
            while (${LOOP_COND}) {
                ${LOOPVAR_DECL} = ${START};
                (void) ${LOOPVAR};
                ${BLOCK}
                ${LOOP_STEP}
            }
        ]], {
            START = start.name,
            START_STAT  = start_cstats,
            START_VALUE = start_cvalue,
            START_DECL  = c_declaration(start),
            FINISH_STAT  = finish_cstats,
            FINISH_VALUE = finish_cvalue,
            FINISH_DECL  = c_declaration(finish),
            INC_STAT  = inc_cstats,
            INC_VALUE = inc_cvalue,
            INC_DECL  = c_declaration(inc),
            LOOP_COND = loop_cond,
            LOOP_STEP = loop_step,
            LOOPVAR      = stat.decl._cvar.name,
            LOOPVAR_DECL = c_declaration(stat.decl._cvar),
            BLOCK = block_cstats,
        })

    elseif tag == ast.Stat.Assign then
        ctx:begin_scope()
        local var_cstats, var_lvalue = generate_var(stat.var, ctx, WRITE)
        local exp_cstats, exp_cvalue = generate_exp(stat.exp, ctx)
        local assign_stat
        if     var_lvalue._tag == coder.Lvalue.CVar then
            assign_stat = var_lvalue.varname.." = "..exp_cvalue..";"

        elseif var_lvalue._tag == coder.Lvalue.SafeSlot then
            assign_stat = set_heap_slot(
                stat.exp._type, var_lvalue.slot_address, exp_cvalue,
                var_lvalue.parent_pointer)

        elseif var_lvalue._tag == coder.Lvalue.ArraySlot then
            assign_stat = set_heap_slot(
                stat.exp._type, var_lvalue.slot_address, exp_cvalue,
                var_lvalue.parent_pointer)

        else
            error("impossible")
        end
        ctx:end_scope()
        return util.render([[
            ${VAR_STATS}
            ${EXP_STATS}
            ${ASSIGN_STAT}
        ]], {
            VAR_STATS = var_cstats,
            EXP_STATS = exp_cstats,
            ASSIGN_STAT = assign_stat,
        })

    elseif tag == ast.Stat.Decl then
        ctx:begin_scope()
        local exp_cstats, exp_cvalue = generate_exp(stat.exp, ctx)
        ctx:end_scope() -- (don't put the tvar inside this scope!)
        stat.decl._cvar = ctx:new_tvar(stat.decl._type, stat.decl.name)
        return util.render([[
            ${STATS}
            ${DECLARATION} = ${VALUE};
        ]], {
            STATS = exp_cstats,
            VALUE = exp_cvalue,
            DECLARATION = c_declaration(stat.decl._cvar),
        })

    elseif tag == ast.Stat.Call then
        ctx:begin_scope()
        local cstats, cvalue = generate_exp(stat.callexp, ctx)

        local ignore_result
        if stat.callexp._type._tag == types.T.Void then
            ignore_result = ""
        else
            ignore_result = "(void) " .. cvalue .. ";"
        end
        ctx:end_scope()

        return util.render([[
            ${STATS}
            ${IGNORE_RESULT}
        ]], {
            STATS = cstats,
            IGNORE_RESULT = ignore_result
        })

    elseif tag == ast.Stat.Return then
        assert(#stat.exps <= 1)
        ctx:begin_scope()
        local cstats, cvalue
        if #stat.exps == 0 then
            cstats = ""
            cvalue = ""
        else
            cstats, cvalue = generate_exp(stat.exps[1], ctx)
        end
        ctx:end_scope()
        return util.render([[
            ${CSTATS}
            return ${CVALUE};
        ]], {
            CSTATS = cstats,
            CVALUE = cvalue
        })

    else
        error("impossible")
    end
end

-- @param var: (ast.Var)
-- @param cts: (Context)
-- @param rw:  (ReadWrite)
-- @returns (string, coder.Lvalue) C Statements, and a lvalue
--
-- The lvalue should not not contain side-effects. Anything that could care
-- about evaluation order should be returned as part of the first argument.
generate_var = function(var, ctx, rw)
    local tag = var._tag
    if     tag == ast.Var.Name then
        local decl = var._decl
        if    decl._tag == ast.Decl.Decl then
            -- Local variable
            return "", coder.Lvalue.CVar(decl._cvar.name)

        elseif decl._tag == ast.Toplevel.Var or
                decl._tag == ast.Toplevel.Func
        then
            local i = c_integer(decl._global_index)
            local slot_exp = util.render("&${ARR}[${I}]", {
                ARR = ctx.upvalues.array.name,
                I = i,
            })
            return "", coder.Lvalue.SafeSlot(slot_exp, ctx.upvalues.table.name)

        else
            error("impossible")
        end

    elseif tag == ast.Var.Bracket then
        local ui = ctx:new_cvar("lua_Unsigned", "ui")
        local slot = ctx:new_cvar("TValue *", "slot")
        local t_cstats, t_cvalue = generate_exp(var.exp1, ctx)
        local k_cstats, k_cvalue = generate_exp(var.exp2, ctx)
        local oob
        if     rw._tag == coder.RW.Read then
            oob = "titan_runtime_array_out_of_bounds_read"
        elseif rw._tag == coder.RW.Write then
            oob = "titan_runtime_array_out_of_bounds_write"
        else
            error("impossible")
        end
        local stats = util.render([[
            ${T_CSTATS}
            ${K_CSTATS}
            ${UI_DECL} = ((lua_Unsigned)${K_CVALUE}) - 1;
            if (TITAN_UNLIKELY(${UI_NAME} >= ${T_CVALUE}->sizearray)) {
                ${OOB}(L, ${T_CVALUE}, ${UI_NAME}, ${LINE}, ${COL});
            }
            ${SLOT_DECL} = &${T_CVALUE}->array[${UI_NAME}];
        ]], {
            T_CSTATS = t_cstats,
            T_CVALUE = t_cvalue,
            K_CSTATS = k_cstats,
            K_CVALUE = k_cvalue,
            UI_NAME = ui.name,
            UI_DECL = c_declaration(ui),
            SLOT_DECL = c_declaration(slot),
            OOB = oob,
            LINE = c_integer(var.loc.line),
            COL = c_integer(var.loc.col),
        })
        return stats, coder.Lvalue.ArraySlot(slot.name, t_cvalue)

    elseif tag == ast.Var.Dot then
        error("not implemented yet")

    else
        error("impossible")
    end
end

local function generate_exp_builtin_table_remove(exp, ctx)
    local args = exp.args
    assert(#args == 1)
    local cstats_t, cvalue_t = generate_exp(args[1])
    local ui = ctx:new_cvar("lua_Unsigned", "ui")
    local halfsize = ctx:new_cvar("lua_Unsigned", "halfsize")
    local slot = ctx:new_cvar("TValue *", "slot")
    local cstats = util.render([[
        ${CSTATS_T}
        ${UI_DECL} = luaH_getn(${CVALUE_T});
        if (TITAN_LIKELY(${UI} > 0)) {
            ${UI} = ${UI} - 1;
            if (${UI} >= ${CVALUE_T}->sizearray) {
                titan_runtime_array_out_of_bounds_read(L, ${CVALUE_T}, ${UI}, ${LINE},
                ${COL}); }
            ${SLOT_DECL} = &${CVALUE_T}->array[${UI}];
            setempty(${SLOT});
            ${HALFSIZE_DECL} = ${CVALUE_T}->sizearray / 2;
            if (${UI} < ${HALFSIZE}) { luaH_resizearray(L, ${CVALUE_T}, ${HALFSIZE}); }
        }
    ]], {
        CSTATS_T = cstats_t,
        CVALUE_T = cvalue_t,
        UI = ui.name,
        UI_DECL = c_declaration(ui),
        HALFSIZE = halfsize.name,
        HALFSIZE_DECL = c_declaration(halfsize),
        SLOT = slot.name,
        SLOT_DECL = c_declaration(slot),
        LINE = exp.loc.line,
        COL = exp.loc.col,
    })
    return cstats, "VOID"
end


-- @param exp: (ast.Exp)
-- @returns (string, string) C statements, C rvalue
--
-- The rvalue should not not contain side-effects. Anything that could care
-- about evaluation order should be returned as part of the first argument.
generate_exp = function(exp, ctx)
    local tag = exp._tag
    if     tag == ast.Exp.Nil then
        return "", c_integer(0)

    elseif tag == ast.Exp.Bool then
        return "", c_boolean(exp.value)

    elseif tag == ast.Exp.Integer then
        return "", c_integer(exp.value)

    elseif tag == ast.Exp.Float then
        return "", c_float(exp.value)

    elseif tag == ast.Exp.String then
        error("not implemented yet")

    elseif tag == ast.Exp.Initlist then
        if exp._type._tag == types.T.Array then
            local cond_gc = gc_cond_gc(ctx)

            local tbl = ctx:new_tvar(exp._type)
            local array_part = ctx:new_cvar("TValue *")

            local init_cstats = {}
            for i, field in ipairs(exp.fields) do
                local field_cstats, field_cvalue = generate_exp(field.exp, ctx)
                local slot = util.render([[${ARRAY_PART} + ${I}]], {
                    ARRAY_PART = array_part.name,
                    I = c_integer(i-1)
                })
                table.insert(init_cstats, field_cstats)
                table.insert(init_cstats, set_heap_slot(
                    exp._type.elem, slot, field_cvalue, tbl.name))
            end

            -- Avoid warnings
            if #init_cstats == 0 then
                table.insert(init_cstats, util.render([[
                    (void) ${ARRAY_PART};
                ]], {
                    ARRAY_PART = array_part.name
                }))
            end

            local cstats = util.render([[
                ${COND_GC}
                ${TBL_DECL} = luaH_new(L);
                luaH_resizearray(L, ${TBL}, ${N});
                ${ARRAY_PART_DECL} = ${TBL}->array;
                ${FIELD_INIT}
            ]], {
                TBL = tbl.name,
                TBL_DECL = c_declaration(tbl),
                ARRAY_PART = array_part.name,
                ARRAY_PART_DECL = c_declaration(array_part),
                N = c_integer(#exp.fields),
                FIELD_INIT = table.concat(init_cstats, "\n"),
                COND_GC = cond_gc,
            })

            return cstats, tbl.name

        elseif exp._type._tag == types.T.Record then
            error("not implemented yet")

        else
            error("impossible")
        end

    elseif tag == ast.Exp.CallFunc then
        local fexp = exp.exp
        local fargs = exp.args

        if fexp._type._tag == types.T.Builtin then
            local builtin_name = fexp._type.builtin_decl.name
            if builtin_name == "table.remove" then
                return generate_exp_builtin_table_remove(exp, ctx)
            else
                error("impossible")
            end
        elseif fexp._tag == ast.Exp.Var and
            fexp.var._tag == ast.Var.Name and
            fexp.var._decl._tag == ast.Toplevel.Func
        then
            -- Directly calling a toplevel function

            local arg_cstatss = {}
            local arg_cvalues = {"L"}
            for _, arg_exp in ipairs(fargs) do
                local cstats, cvalue = generate_exp(arg_exp, ctx)
                table.insert(arg_cstatss, cstats)
                table.insert(arg_cvalues, cvalue)
            end

            local save_vars = gc_save_vars(ctx)

            local tl_node = fexp.var._decl

            local tmp_var, tmp_init
            if #tl_node._type.rettypes == 0 then
                tmp_var = "VOID" -- gives C error if accidentaly used
                tmp_init = ""
            elseif #tl_node._type.rettypes == 1 then
                local rettype = tl_node._type.rettypes[1]
                local tmp = ctx:new_tvar(rettype)
                tmp_var = tmp.name
                tmp_init = c_declaration(tmp) .. " ="
            else
                error("not implemented")
            end

            local release_vars = gc_release_vars(ctx)

            local cstats = util.render([[
                ${ARG_STATS}
                ${SAVE_VARS}
                ${TMP_INIT} ${FUN_NAME}(${ARGS});
                ${RELEASE_VARS}
            ]], {
                FUN_NAME  = tl_node._titan_entry_point,
                ARG_STATS = table.concat(arg_cstatss, "\n"),
                ARGS      = table.concat(arg_cvalues, ", "),
                TMP_INIT  = tmp_init,
                SAVE_VARS = save_vars,
                RELEASE_VARS = release_vars,
            })
            return cstats, tmp_var

        else
            -- First-class functions and Lua function calls
            local nargs = #fexp._type.params
            local nret = #fexp._type.rettypes

            local to_push = {}
            local function generate(exp_to_push)
                local cstats, cvalue = generate_exp(exp_to_push, ctx)
                -- we don't use ctx:new_tvar because values were already saved
                table.insert(to_push,
                    { typ = exp_to_push._type, cvalue = cvalue })
                return cstats
            end

            local body = {}
            table.insert(body, generate(fexp))
            for _, arg_exp in ipairs(fargs) do
                table.insert(body, generate(arg_exp))
            end

            table.insert(body, gc_save_vars(ctx))

            for _, x in ipairs(to_push) do
                local push = push_to_stack(ctx, x.typ, x.cvalue)
                table.insert(body, push)
            end

            ctx:free_slots(nargs + 1)
            ctx:reserve_slots(nret)
            table.insert(body, util.render([[
                lua_call(L, ${NARGS}, ${NRET});
            ]], {
                NARGS = nargs,
                NRET = nret,
            }))

            local retval
            if nret == 0 then
                retval = "VOID"

            elseif nret == 1 then
                local ret_typ = fexp._type.rettypes[1]
                local slot = ctx:new_cvar("TValue*")
                local ret = ctx:new_tvar(ret_typ)
                retval = ret.name
                table.insert(body, util.render([[
                    ${SLOT_DECL} = s2v(L->top-1);
                    if (TITAN_UNLIKELY(!${CHECK_TAG})) {
                        titan_runtime_function_return_error(L, ${LINE}, ${EXPECTED_TAG}, ${SLOT});
                    }
                    ${RET_DECL} = ${GET_SLOT};
                    L->top--;
                ]], {
                    SLOT      = slot.name,
                    SLOT_DECL = c_declaration(slot),
                    CHECK_TAG = check_tag(ret_typ, slot.name),
                    LINE = c_integer(exp.loc.line),
                    EXPECTED_TAG = titan_type_tag(ret_typ),
                    RET_DECL = c_declaration(ret),
                    GET_SLOT = get_slot(ret_typ, slot.name),
                }))
            else
                error("not implemented")
            end
            ctx:free_slots(nret)

            table.insert(body, gc_release_vars(ctx))

            local cstats = table.concat(body, "\n")
            return cstats, retval
        end

    elseif tag == ast.CallMethod then
        error("not implemented")

    elseif tag == ast.Exp.Var then
        local exp_cstats, lvalue = generate_var(exp.var, ctx, READ)

        if     lvalue._tag == coder.Lvalue.CVar then
            return exp_cstats, lvalue.varname

        elseif lvalue._tag == coder.Lvalue.SafeSlot then
            local cvar = ctx:new_cvar(ctype(exp._type))
            local cstats = util.render([[
                ${EXP_STATS}
                ${VAR_DECL} = ${GET_SLOT};
            ]], {
                EXP_STATS = exp_cstats,
                VAR_DECL = c_declaration(cvar),
                GET_SLOT = get_slot(exp.var._type, lvalue.slot_address),
            })
            return cstats, cvar.name

        elseif lvalue._tag == coder.Lvalue.ArraySlot then
            local cvar = ctx:new_cvar(ctype(exp._type))
            local slot = lvalue.slot_address
            local cstats = util.render([[
                ${EXP_STATS}
                if (TITAN_UNLIKELY(!${CHECK_TAG})) {
                    titan_runtime_array_type_error(L, ${LINE}, ${EXPECTED_TAG}, ${SLOT});
                }
                ${VAR_DECL} = ${GET_SLOT};
            ]], {
                EXP_STATS = exp_cstats,
                CHECK_TAG = check_tag(exp._type, slot),
                LINE = c_integer(exp.loc.line),
                EXPECTED_TAG = titan_type_tag(exp._type),
                SLOT = slot,
                VAR_DECL = c_declaration(cvar),
                GET_SLOT = get_slot(exp.var._type, lvalue.slot_address),
            })
            return cstats, cvar.name

        else
            error("impossible")
        end

    elseif tag == ast.Exp.Unop then
        local cstats, cvalue = generate_exp(exp.exp, ctx)

        local op = exp.op
        if op == "#" then
            if exp.exp._type._tag == types.T.Array then
                local tmp = ctx:new_cvar("lua_Integer")
                local cstats_op = util.render([[
                    ${CSTATS}
                    ${TMP_DECL} = luaH_getn(${CVALUE});
                ]], {
                    CSTATS = cstats,
                    CVALUE = cvalue,
                    TMP_DECL = c_declaration(tmp),
                })
                return cstats_op, tmp.name
            elseif exp.exp._type._tag == types.T.String then
                error("not implemented")
            else
                error("impossible")
            end

        elseif op == "-" then
            return cstats, "(".."-"..cvalue..")"

        elseif op == "~" then
            return cstats, "(".."~"..cvalue..")"

        elseif op == "not" then
            return cstats, "(".."!"..cvalue..")"

        else
            error("impossible")
        end

    elseif tag == ast.Exp.Concat then
        error("not implemented yet")

    elseif tag == ast.Exp.Binop then
        local lhs_cstats, lhs_cvalue = generate_exp(exp.lhs, ctx)
        local rhs_cstats, rhs_cvalue = generate_exp(exp.rhs, ctx)

        -- Lua's arithmetic and bitwise operations for integers happen with
        -- unsigned integers, to ensure 2's compliment behavior and avoid
        -- undefined behavior.
        local function intop(op)
            local cstats = lhs_cstats..rhs_cstats
            local cvalue = util.render("intop(${OP}, ${LHS}, ${RHS})", {
                OP=op, LHS=lhs_cvalue, RHS=rhs_cvalue })
            return cstats, cvalue
        end

        -- Relational operators, and basic float operations don't convert their
        -- parameters
        local function binop(op)
            local cstats = lhs_cstats..rhs_cstats
            local cvalue = util.render("(${LHS} ${OP} ${RHS})", {
                OP=op, LHS=lhs_cvalue, RHS=rhs_cvalue })
            return cstats, cvalue
        end

        local ltyp = exp.lhs._type._tag
        local rtyp = exp.rhs._type._tag

        local op = exp.op
        if     op == "+" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop("+")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("+")
            else
                error("impossible")
            end

        elseif op == "-" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop("-")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("-")
            else
                error("impossible")
            end

        elseif op == "*" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop("*")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("*")
            else
                error("impossible")
            end

        elseif op == "/" then
            if     ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("/")
            else
                error("impossible")
            end

        elseif op == "&" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop("&")
            else
                error("impossible")
            end

        elseif op == "|" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop("|")
            else
                error("impossible")
            end

        elseif op == "~" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop("^")
            else
                error("impossible")
            end

        elseif op == "<<" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop("<<")
            else
                error("impossible")
            end

        elseif op == ">>" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return intop(">>")
            else
                error("impossible")
            end

        elseif op == "%" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                local cstats = lhs_cstats..rhs_cstats
                local cvalue = util.render("luaV_mod(L, ${LHS}, ${RHS})", {
                    LHS=lhs_cvalue, RHS=rhs_cvalue })
                return cstats, cvalue

            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                -- see luai_nummod
                error("not implemented yet")

            else
                error("impossible")
            end

        elseif op == "//" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                local cstats = lhs_cstats..rhs_cstats
                local cvalue = util.render("luaV_div(L, ${LHS}, ${RHS})", {
                    LHS=lhs_cvalue, RHS=rhs_cvalue })
                return cstats, cvalue

            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                -- see luai_numidiv
                local cstats = lhs_cstats..rhs_cstats
                local cvalue = util.render("floor(${LHS} / ${RHS})", {
                    LHS=lhs_cvalue, RHS=rhs_cvalue })
                return cstats, cvalue

            else
                error("impossible")
            end

        elseif op == "^" then
            if     ltyp == types.T.Float and rtyp == types.T.Float then
                -- see luai_numpow
                local cstats = lhs_cstats..rhs_cstats
                local cvalue = util.render("pow(${LHS}, ${RHS})", {
                    LHS=lhs_cvalue, RHS=rhs_cvalue })
                return cstats, cvalue

            else
                error("impossible")
            end

        elseif op == "==" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return binop("==")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("==")
            else
                error("not implemented yet")
            end

        elseif op == "~=" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return binop("!=")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("!=")
            else
                error("not implemented yet")
            end

        elseif op == "<" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return binop("<")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("<")
            elseif ltyp == types.T.String and rtyp == types.T.String then
                error("not implemented yet")
            elseif ltyp == types.T.Integer and rtyp == types.T.Float then
                error("not implemented yet") -- see LTnum
            elseif ltyp == types.T.Float and rtyp == types.T.Integer then
                error("not implemented yet") -- see LTnum
            else
                error("impossible")
            end

        elseif op == ">" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return binop(">")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop(">")
            elseif ltyp == types.T.String and rtyp == types.T.String then
                error("not implemented yet")
            elseif ltyp == types.T.Integer and rtyp == types.T.Float then
                error("not implemented yet") -- see LTnum
            elseif ltyp == types.T.Float and rtyp == types.T.Integer then
                error("not implemented yet") -- see LTnum
            else
                error("impossible")
            end

        elseif op == "<=" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return binop("<=")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop("<=")
            elseif ltyp == types.T.String and rtyp == types.T.String then
                error("not implemented yet")
            elseif ltyp == types.T.Integer and rtyp == types.T.Float then
                error("not implemented yet") -- see LTnum
            elseif ltyp == types.T.Float and rtyp == types.T.Integer then
                error("not implemented yet") -- see LTnum
            else
                error("impossible")
            end

        elseif op == ">=" then
            if     ltyp == types.T.Integer and rtyp == types.T.Integer then
                return binop(">=")
            elseif ltyp == types.T.Float and rtyp == types.T.Float then
                return binop(">=")
            elseif ltyp == types.T.String and rtyp == types.T.String then
                error("not implemented yet")
            elseif ltyp == types.T.Integer and rtyp == types.T.Float then
                error("not implemented yet") -- see LTnum
            elseif ltyp == types.T.Float and rtyp == types.T.Integer then
                error("not implemented yet") -- see LTnum
            else
                error("impossible")
            end

        elseif op == "and" then
            if     ltyp == types.T.Boolean and rtyp == types.T.Boolean then
                local l_cstats, l_cvalue = generate_exp(exp.lhs, ctx)
                local tmp = ctx:new_tvar(types.T.Boolean())
                local r_cstats, r_cvalue = generate_exp(exp.rhs, ctx)

                local cstats = util.render([[
                    ${L_STATS}
                    ${TMP_DECL} = ${L_VALUE};
                    if (${TMP}) {
                      ${R_STATS}
                      ${TMP} = ${R_VALUE};
                    }
                ]], {
                    TMP = tmp.name,
                    TMP_DECL = c_declaration(tmp),
                    L_STATS = l_cstats,
                    L_VALUE = l_cvalue,
                    R_STATS = r_cstats,
                    R_VALUE = r_cvalue,
                })
                return cstats, tmp.name

            else
                error("impossible")
            end

        elseif op == "or" then
            if     ltyp == types.T.Boolean and rtyp == types.T.Boolean then
                local l_cstats, l_cvalue = generate_exp(exp.lhs, ctx)
                local tmp = ctx:new_tvar(types.T.Boolean())
                local r_cstats, r_cvalue = generate_exp(exp.rhs, ctx)

                local cstats = util.render([[
                    ${L_STATS}
                    ${TMP_DECL} = ${L_VALUE};
                    if (!${TMP}) {
                      ${R_STATS}
                      ${TMP} = ${R_VALUE};
                    }
                ]], {
                    TMP = tmp.name,
                    TMP_DECL = c_declaration(tmp),
                    L_STATS = l_cstats,
                    L_VALUE = l_cvalue,
                    R_STATS = r_cstats,
                    R_VALUE = r_cvalue,
                })
                return cstats, tmp.name

            else
                error("impossible")
            end

        else
            error("impossible")
        end

    elseif tag == ast.Exp.Cast then
        local cstats, cvalue = generate_exp(exp.exp, ctx)

        local src_typ = exp.exp._type
        local dst_typ = exp._type

        if     src_typ._tag == dst_typ._tag then
            return cstats, cvalue

        elseif src_typ._tag == types.T.Integer and dst_typ._tag == types.T.Float then
            return cstats, "((lua_Number)"..cvalue..")"

        elseif src_typ._tag == types.T.Float and dst_typ._tag == types.T.Integer then
            error("not implemented yet")

        else
            error("impossible")
        end

    else
        error("impossible")
    end
end

return coder
