local tab = import "examples.utils"

-- Add two numbers

function foo(x: integer, y: integer): integer
    return x + y
end

function doublea(): integer
    a = a * 2
    return a
end

function doubleb(): integer
    b = b * 2
    return b
end

function setc(t: { integer }): nil
    c = t
end

function sumc(): integer
    local s = 0
    for i = 1, #c do
        s = s + c[i]
    end
    return s
end

function sumd(): integer
    local s = 0
    for i = 1, #d do
        s = s + d[i]
    end
    return s
end

local a: integer = 2

b: integer = 10

local c: {integer} = {1,2,3}

d: {integer} = {3,4,5}

function filltable(N: integer): { integer }
    local xs: { integer } = {}
    for i=1,N do
        xs[i] = 10*i
    end
    return xs
end

function sieve(N: integer): {integer}

    local is_prime: {boolean} = {}
    is_prime[1] = false
    for n=2,N do
        is_prime[n] = true
    end

    local nprimes = 0
    local primes: {integer} = {}

    for n=1,N do
        if is_prime[n] then
            nprimes = nprimes + 1;
            primes[nprimes] = n
            for m = n+n, N, n do
                is_prime[m] = false
            end
        end
    end

    return primes
end


function sort(xs: {integer}): nil
    local N = #xs
    for i=1,N do

        -- Find minimum
        local min_i = i
        local min_x = xs[i]
        for j = i+1, N do
            local y = xs[j]
            if y < min_x then
                min_i = j
                min_x = y
            end
        end

        -- Move it to the front
        local tmp = xs[i]
        xs[i] = xs[min_i]
        xs[min_i] = tmp
    end
end

function sum(N: integer): integer
    local res = 0
    for i=1,N do
        res = res + i
    end
    return res
end

function test_fsf(n: integer): boolean
  local t1 = filltable(n)
  local t2 = tab.split(t1, 3)
  local t3 = tab.flatten(t2)
  local res = true
  for i = 1, #t1 do
    if t1[i] ~= t3[i] then
      return false
    end
  end
  return res
end

-- the classic
function fat(n: integer): integer
  if n < 2 then
    return 1
  else
    return n * fat(n-1)
  end
end

-- another classic
local function partition(array: {integer}, p: integer, r: integer): integer
    local x = array[r]
    local i = p - 1
    for j = p, r - 1 do
        if array[j] <= x then
            i = i + 1
            local temp = array[i]
            array[i] = array[j]
            array[j] = temp
        end
    end
    local temp = array[i + 1]
    array[i + 1] = array[r]
    array[r] = temp
    return i + 1
end

function quicksort(array: {integer}, left: integer, right: integer): nil
	if right > left then
	    local pivotNewIndex = partition(array, left, right)
	    quicksort(array, left, pivotNewIndex - 1)
	    quicksort(array, pivotNewIndex + 1, right)
	end
end

function qsort(array: {integer}): nil
  quicksort(array, 1, #array)
end

function delete(array: {integer}, i: integer): nil
  array[i] = nil
end

function strlen(s: string): integer
  return #s
end

function lit(): string
  return "foo\tbar\nbaz"
end

function concat(a: string): string
  return tab.indent .. a .. "foo"
end

function setindent(a: string): nil
  tab.indent = a
end
