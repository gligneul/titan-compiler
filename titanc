#!/usr/bin/env lua

local argparse = require 'argparse'

local checker = require 'titan-compiler.checker'
local coder = require 'titan-compiler.coder'
local parser = require 'titan-compiler.parser'
local util = require 'titan-compiler.util'
local pretty = require 'titan-compiler.pretty'

local p = argparse('titan', 'Titan compiler')
p:argument('input', 'Input file.')
p:flag('--print-ast', 'Print the AST.')
p:option('-o --output', 'Output file.')
p:flag('--print-types', 'Print the AST with types.')
p:option('-l --lua', 'Path to Lua source tree.')
local args = p:parse()

-- Work like assert, but don't print the stack trace
local function exit(msg)
    io.stderr:write(arg[0], ": ", msg, "\n")
    os.exit(1)
end

local modname

local input, err
if args.input == '-' then
    input = io.read("*a")
    modname = "stdin"
else
    input, errmsg = util.get_file_contents(args.input)
    modname = args.input:match("([^/\\]*)[.]titan$") or "sample"
    if not input then exit(errmsg) end
end

if not args.output then
	local output_name = args.input:match("(.*)[.]titan$") or "titanc"
  args.output = output_name .. ".c"
else
  modname = args.output:match("^(.*)[.]c$"):gsub("[/\\]", "_")
end

if not args.lua then
  args.lua = "lua/src/"
end

local ast, err = parser.parse(input)
if not ast then exit(parser.error_to_string(err, args.input)) end

if args.print_ast then
  print(parser.pretty_print_ast(ast))
  os.exit(0)
end

local ok, errmsgs = checker.check(modname, ast, input, args.input)
if not ok then exit(errmsgs) end

if args.print_types then
    print(parser.pretty_print_ast(ast))
    os.exit(0)
end

local generated_code = coder.generate(modname, ast)
generated_code = pretty.reindent_c(generated_code)
ok, errmsg = util.set_file_contents(args.output, generated_code)
if not ok then exit(errmsg) end

local CC = os.getenv("CC") or "gcc"
local CFLAGS = os.getenv("CFLAGS") or "--std=c99 -O2 -Wall"

os.execute(string.format([[
%s %s -I%s -fPIC -shared %s lua/src/liblua.a -o %s.so
]], CC, CFLAGS, args.lua, args.output, modname))
